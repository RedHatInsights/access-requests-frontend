name: Chromatic Deployment

on:
  # Trigger on pushes to master
  push:
    branches:
      - master
  
  # Trigger on PRs to master - use pull_request_target for forks
  pull_request_target:
    branches:
      - master

jobs:
  # Job for push events to master
  chromatic-deployment-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Storybook and deploy to Chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build-storybook
          exitZeroOnChanges: true

  # Job to check if user is a team member for PRs
  check-permissions:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    outputs:
      is-team-member: ${{ steps.check-membership.outputs.is-member }}
    steps:
      - name: Check team membership
        id: check-membership
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Check organization membership first
              const orgMembership = await github.rest.orgs.getMembershipForUser({
                org: 'RedHatInsights',
                username: context.payload.pull_request.user.login
              });
              
              // If user is an organization admin, allow access
              if (orgMembership.data.role === 'admin') {
                core.setOutput('is-member', true);
                core.info(`User ${context.payload.pull_request.user.login} is an organization admin`);
                return;
              }
              
              // Check team membership
              const teamMembership = await github.rest.teams.getMembershipForUserInOrg({
                org: 'RedHatInsights',
                team_slug: 'experience-ui-committers',
                username: context.payload.pull_request.user.login
              });
              
              // Check if user is a team member or maintainer
              const isMember = teamMembership.data.state === 'active' && (teamMembership.data.role === 'member' || teamMembership.data.role === 'maintainer');
              core.setOutput('is-member', isMember);
              
              if (isMember) {
                core.info(`User ${context.payload.pull_request.user.login} is a team member`);
              } else {
                core.info(`User ${context.payload.pull_request.user.login} is not a team member`);
              }
            } catch (error) {
              core.info(`Error checking membership: ${error.message}`);
              core.setOutput('is-member', false);
            }

  # Job for PR events from team members
  chromatic-deployment-pr:
    if: github.event_name == 'pull_request_target' && needs.check-permissions.outputs.is-team-member == 'true'
    runs-on: ubuntu-latest
    needs: [check-permissions]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull_request_target, checkout the PR head
          ref: ${{ github.event.pull_request.head.sha }}
          # Fetch full history for Chromatic
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Storybook and deploy to Chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build-storybook
          exitZeroOnChanges: true 